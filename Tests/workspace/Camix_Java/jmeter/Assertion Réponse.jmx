<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="TCPConfigGui" testclass="ConfigTestElement" testname="Paramètres TCP connexion Camix" enabled="true">
        <stringProp name="TCPSampler.server">127.0.0.1</stringProp>
        <boolProp name="TCPSampler.reUseConnection">true</boolProp>
        <stringProp name="TCPSampler.port">12345</stringProp>
        <boolProp name="TCPSampler.nodelay">false</boolProp>
        <stringProp name="TCPSampler.timeout">500</stringProp>
        <stringProp name="TCPSampler.request"></stringProp>
        <stringProp name="TCPSampler.classname">camix.TCPClientCamixImpl</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Protocole" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="COMMANDE_CHANGE_SURNOM_CLIENT" elementType="Argument">
            <stringProp name="Argument.name">COMMANDE_CHANGE_SURNOM_CLIENT</stringProp>
            <stringProp name="Argument.value">/n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMMANDE_CHANGE_CANAL_CLIENT" elementType="Argument">
            <stringProp name="Argument.name">COMMANDE_CHANGE_CANAL_CLIENT</stringProp>
            <stringProp name="Argument.value">/c</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMMANDE_AJOUTE_CANAL" elementType="Argument">
            <stringProp name="Argument.name">COMMANDE_AJOUTE_CANAL</stringProp>
            <stringProp name="Argument.value">/a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMMANDE_SUPPRIME_CANAL" elementType="Argument">
            <stringProp name="Argument.name">COMMANDE_SUPPRIME_CANAL</stringProp>
            <stringProp name="Argument.value">/r</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMMANDE_AFFICHE_CANAUX" elementType="Argument">
            <stringProp name="Argument.name">COMMANDE_AFFICHE_CANAUX</stringProp>
            <stringProp name="Argument.value">/l</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMMANDE_AFFICHE_CLIENT" elementType="Argument">
            <stringProp name="Argument.name">COMMANDE_AFFICHE_CLIENT</stringProp>
            <stringProp name="Argument.value">/?</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMMANDE_AFFICHE_AIDE" elementType="Argument">
            <stringProp name="Argument.name">COMMANDE_AFFICHE_AIDE</stringProp>
            <stringProp name="Argument.value">/h</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COMMANDE_FERMETURE_CLIENT" elementType="Argument">
            <stringProp name="Argument.name">COMMANDE_FERMETURE_CLIENT</stringProp>
            <stringProp name="Argument.value">/q</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_PREFIXE_MESSAGE" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_PREFIXE_MESSAGE</stringProp>
            <stringProp name="Argument.value">%s &gt; %s</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_ARRIVEE_CHAT" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_ARRIVEE_CHAT</stringProp>
            <stringProp name="Argument.value">* Un nouvel utilisateur est dans le chat (%s).%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_ACCUEIL_CHAT" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_ACCUEIL_CHAT</stringProp>
            <stringProp name="Argument.value">* Taper /h pour avoir de l&apos;aide sur les commandes du chat.%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_DEPART_CHAT" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_DEPART_CHAT</stringProp>
            <stringProp name="Argument.value">* %s quitte le chat.%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_CHANGEMENT_SURNOM" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_CHANGEMENT_SURNOM</stringProp>
            <stringProp name="Argument.value">* %s devient %s.%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_DEPART_CANAL" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_DEPART_CANAL</stringProp>
            <stringProp name="Argument.value">* %s quitte le canal %s.%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_ARRIVEE_CANAL" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_ARRIVEE_CANAL</stringProp>
            <stringProp name="Argument.value">* %s rejoint le canal %s.%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_NON_EXISTENCE_CANAL_DEMANDE" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_NON_EXISTENCE_CANAL_DEMANDE</stringProp>
            <stringProp name="Argument.value">* Le canal demandé n&apos;existe pas.%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_CREATION_CANAL" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_CREATION_CANAL</stringProp>
            <stringProp name="Argument.value">* Le canal %s a été créé.%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_CREATION_IMPOSSIBLE_CANAL" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_CREATION_IMPOSSIBLE_CANAL</stringProp>
            <stringProp name="Argument.value">* Le canal %s existe déjà.%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_SUPPRESSION_CANAL" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_SUPPRESSION_CANAL</stringProp>
            <stringProp name="Argument.value">* Le canal %s a été supprimé.%n</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MESSAGE_SORTIE_CHAT" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_SORTIE_CHAT</stringProp>
            <stringProp name="Argument.value">* Sortie du chat.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Variables du protocole de communication avec le serveur Camix</stringProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Groupe d&apos;unités" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Contrôleur Boucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Contrôleur Module" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-2116365918">Fragment  d&apos;éléments</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Fragment  d&apos;éléments" enabled="false"/>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Compteur de temps fixe" enabled="true">
          <stringProp name="ConstantTimer.delay">500</stringProp>
        </ConstantTimer>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Changement de nom" enabled="true">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">${COMMANDE_CHANGE_SURNOM_CLIENT} test</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Réponse" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1191651519">${MESSAGE_CHANGEMENT_SURNOM}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP" enabled="true">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request"></stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP" enabled="true">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request"></stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP" enabled="true">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request"></stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP" enabled="true">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request"></stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Requête TCP" enabled="true">
          <stringProp name="TCPSampler.server"></stringProp>
          <boolProp name="TCPSampler.reUseConnection">true</boolProp>
          <stringProp name="TCPSampler.port"></stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request"></stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Arbre de résultats" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
